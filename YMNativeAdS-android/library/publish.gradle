// bintray插件使用说明： https://github.com/bintray/gradle-bintray-plugin
// aar使用例子： https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example%2Fbuild.gradle
//
// 3种上传方式的例子:
//
// 1. Maven Publications 上传方式例子：
//
//      https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/publications-example/build.gradle
//
// 2. Configurations 上传方式例子：
//
//      https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/configurations-example/build.gradle
//
// 3. Copying specific files using filesSpec 上传方式例子：
//
//      https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/filesSpec-example/build.gradle

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// Maven Group ID for the artifact
group = project.ext.publishedGroupId
version = project.ext.libraryVersionName
project.archivesBaseName = project.ext.artifact

install {
	repositories.mavenInstaller {
		pom {
			project {

				packaging 'aar'                             // 打包aar
				groupId = project.ext.publishedGroupId
				artifactId = project.ext.artifact
				version = project.ext.libraryVersionName

				name project.ext.libraryName                // 项目名称
				description project.ext.libDesc             // 项目描述
				url project.ext.siteUrl                     // 项目主页
				inceptionYear '2017'

				// 开源协议
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				// 开发者信息
				developers {
					developer {
						id System.getenv('DEVELOPER_ID_YOUMI')
						name System.getenv('DEVELOPER_NAME_YOUMI')
						email System.getenv('DEVELOPER_EMAIL_YOUMI')
					}
				}
				scm {
					// Git 仓库地址
					connection project.ext.gitUrl
					// Git 仓库地址
					developerConnection project.ext.gitUrl
					// 项目主页
					url project.ext.siteUrl

				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER_YOUMI')
	key = System.getenv('BINTRAY_API_KEY_YOUMI')
	configurations = ['archives'] //上传的内容有好几种方法，这里用 configurations

	// (可选参数) Whether to run this as dry-run, without deploying
	dryRun = false

	// (可选参数) If version should be auto published after an upload Package configuration. The plugin will use the repo and name
	// properties to check if the package already exists. In that case, there's no need to configure the other package
	// properties (like userOrg, desc, etc).
	publish = true

	// (可选参数)[Default: false] Whether to override version artifacts already published
	override = false

	pkg {

		// (必须参数)existing repository in bintray to add the artifacts to (for example: 'generic', 'maven' etc)
		repo = 'android'
		// repo = 'android'

		// (必须参数)发布到Bintray上的项目名字
		name = project.ext.libraryName

		// (必须参数)开源许可协议
		licenses = ['Apache-2.0']

		// (必须参数)VCS URL
		vcsUrl = project.ext.gitUrl

		// (可选参数) 标签
		labels = project.ext.libLabels

		// (可选参数) 描述
		desc = project.ext.libDesc

		// (可选参数)主页
		websiteUrl = project.ext.siteUrl

		// (可选参数)issue 跟踪地址
		issueTrackerUrl = project.ext.issueUrl

		// (可选参数)是否公开下载次数
		publicDownloadNumbers = true

		// (可选参数)仓库短地址
		githubRepo = project.ext.gitRepo

		// (可选参数)仓库地址下的README.md
		githubReleaseNotesFile = project.ext.releaseNoteFile

		// (可选参数)package-level attributes 暂时不是很懂意思和用法
		// attributes = ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee']

		// (可选参数)when the repo belongs to one of the user's orgs. If not added will use 'BINTRAY_USER' by default
		// userOrg = user

		// 版本信息
		version {
			// 必须参数
			name = project.ext.libraryVersionName

			// 可选参数

			// 版本描述
			desc = project.ext.libraryVersionDesc

			// 发布日期
			released = new Date().format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ')

			// Version control tag name 应该是对应类库的tag
			vcsTag = project.ext.repoTag

			// Attributes to be attached to the version(还不是很懂这个参数使用)
			// attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']

			// Optional version-level attributes
			// Optional configuration for GPG signing
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = System.getenv('BINTRAY_GPG_PSW_YOUMI') //Optional. The passphrase for GPG signing'
			}

			//  Optional configuration for Maven Central sync of the version
			//	mavenCentralSync {
			//		sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
			//		user = 'userToken' //OSS user token
			//		password = 'paasword' //OSS user password
			//		close = '1'
			//		//Optional property. By default the staging repository is closed and artifacts are released to Maven Central.
			//        //You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
			//	}
		}

	}
}

afterEvaluate { project ->

	def isAndroidProject = project.plugins.hasPlugin('com.android.application') ||
			project.plugins.hasPlugin('com.android.library')

	if (isAndroidProject) {
		def releaseVariants = project.android.libraryVariants.findAll {
			it.buildType.name.equalsIgnoreCase('release')
		}

		// 生成 html 的java文档
		// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
		task androidJavadocs(type: Javadoc, dependsOn: compileReleaseJavaWithJavac) {
			// The source for this task, after the include and exclude patterns have been applied. Ignores source files which do
			// not exist.
			source = releaseVariants.collect { it.javaCompile.source }

			// The classpath to use to resolve type references in the source code.
			classpath = files(releaseVariants.collect {
				files(it.javaCompile.classpath.files, project.android.bootClasspath)
			})

			options {
				links('http://docs.oracle.com/javase/7/docs/api/')
				// 加入android的离线文档
				linksOffline('http://d.android.com/reference', "${android.sdkDirectory}/docs/reference")
				encoding "UTF-8"
				charSet 'UTF-8'
				version project.ext.libraryVersionName
				title project.ext.artifact
				// author true
			}

			//	// 跳过出错时的报错 java8编译 文档要求比较高，错了跳不过
			//	failOnError false

			exclude '**/BuildConfig.java'
			if (!project.ext.isPackageResources) {
				exclude '**/R.java'
			}
		}

		task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
			classifier = 'javadoc'
			from androidJavadocs.destinationDir
			baseName project.ext.artifact
		}

		// 将所有源码java文件打包为Jar
		// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
		task androidSourcesJar(type: Jar) {
			classifier = 'sources'
			from project.android.sourceSets.main.java.source
			baseName project.ext.artifact
			//baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
		}

		task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
			from compileReleaseJavaWithJavac.destinationDir

			exclude '**/BuildConfig.class'
			if (!project.ext.isPackageResources) {
				exclude '**/R.class'
			}

			baseName project.ext.artifact
		}

		artifacts {
			archives androidLibraryJar
			archives androidSourcesJar
			archives androidJavadocsJar
		}
	}
	else {
		if (project.plugins.hasPlugin('java')) {
			task sourcesJar(type: Jar, dependsOn: classes) {
				classifier = 'sources'
				from sourceSets.main.allSource
			}

			task javadocsJar(type: Jar, dependsOn: javadoc) {
				classifier = 'javadoc'
				from javadoc.destinationDir
			}

			artifacts {
				archives sourcesJar
				archives javadocsJar
			}
		}
	}
}
